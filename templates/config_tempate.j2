{{ ansible_managed | comment }}

[SERVICE]
    # Flush
    # =====
    # set an interval of seconds before to flush records to a destination
    flush        {{ fluentbit_flush_seconds }}

    # Daemon
    # ======
    # instruct Fluent Bit to run in foreground or background mode.
    daemon       {{ (fluentbit_daemon | bool) | ternary('on', 'off' ) }}

    # Log_Level
    # =========
    # Set the verbosity level of the service, values can be:
    #
    # - error
    # - warning
    # - info
    # - debug
    # - trace
    #
    # by default 'info' is set, that means it includes 'error' and 'warning'.
    log_level    {{ fluentbit_log_level }}

    # Parsers File
    # ============
    # specify an optional 'Parsers' configuration file
    parsers_file parsers.conf
{% if fluentbit_custom_parsers | length >0 %}
    parsers_file additional-parsers.conf
{% endif %}

    # Plugins File
    # ============
    # specify an optional 'Plugins' configuration file to load external plugins.
    plugins_file plugins.conf

    # HTTP Server
    # ===========
    # Enable/Disable the built-in HTTP Server for metrics
    http_server  {{ (fluentbit_enable_metrics | bool) | ternary('on', 'off' ) }}
    http_listen  {{ fluentbit_metrics_listen_ip }}
    http_port    {{ fluentbit_metrics_listen_port }}

    # Storage
    # =======
    # Fluent Bit can use memory and filesystem buffering based mechanisms
    #
    # - https://docs.fluentbit.io/manual/administration/buffering-and-storage
    #
    # storage metrics
    # ---------------
    # publish storage pipeline metrics in '/api/v1/storage'. The metrics are
    # exported only if the 'http_server' option is enabled.
    #
    storage.metrics {{ (fluentbit_storage_metrics | bool) | ternary('on', 'off' ) }}

    # storage.path
    # ------------
    # absolute file system path to store filesystem data buffers (chunks).
    #
{% if fluentbit_storage_path is defined %}
    storage.path {{ fluentbit_storage_path }}
{% endif %}

    # storage.sync
    # ------------
    # configure the synchronization mode used to store the data into the
    # filesystem. It can take the values normal or full.
    #
{% if fluentbit_storage_sync_mode is defined %}
    storage.sync {{ fluentbit_storage_sync_mode }}
{% endif %}

    # storage.checksum
    # ----------------
    # enable the data integrity check when writing and reading data from the
    # filesystem. The storage layer uses the CRC32 algorithm.
    #
{% if fluentbit_storage_checksum is defined %}
    storage.checksum {{ (fluentbit_storage_checksum | bool) | ternary('on', 'off' ) }}
{% endif %}

    # storage.backlog.mem_limit
    # -------------------------
    # if storage.path is set, Fluent Bit will look for data chunks that were
    # not delivered and are still in the storage layer, these are called
    # backlog data. This option configure a hint of maximum value of memory
    # to use when processing these records.
    #
{% if fluentbit_storage_backlog_mem_limit is defined %}
    storage.backlog.mem_limit {{ fluentbit_storage_backlog_mem_limit }}
{% endif %}

{% for input in fluentbit_inputs %}
[INPUT]
{% for key in input %}
    {{ key }} {{ input[key] }}
{% endfor %}
{% endfor %}

{% for filter in fluentbit_filters %}
[FILTER]
{% for key in filter %}
    {{ key }} {{ filter[key] }}
{% endfor %}
{% endfor %}

{% for output in fluentbit_outputs %}
[OUTPUT]
{% for key in output %}
    {{ key }} {{ output[key] }}
{% endfor %}
{% endfor %}
